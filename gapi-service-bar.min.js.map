{"version":3,"sources":["app.module.js","gapi-service-bar-routes.js","gapi-service-bar-controller.js","gapi-service-bar-directive.js","gapi-service-bar-factory.js","gapi-service-bar-request-interceptor.js"],"names":[],"mappingspfile":"gapi-service-bar.min.js","sourcesContent":["/*global angular,console*/\r\n(function () {\r\n    'use strict';\r\n\r\n    // Module dependencies injection\r\n    angular.module('gapiServiceBar', [ 'aruba.js', 'ngMaterial' ]);\r\n\r\n}());\r\n","/*global angular */\r\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('gapiServiceBar').config([ '$httpProvider', function ($httpProvider) {\r\n\r\n        // Interceptor to add token on every Header Request\r\n        $httpProvider.interceptors.push('gapiServiceBarRequestInterceptor');\r\n\r\n    }]);\r\n\r\n}());\r\n","/*jslint nomen:true*/\r\n/*global console, angular*/\r\n\r\n(function () {\r\n    \"use strict\";\r\n\r\n    function GapiServiceBarController($scope, $rootScope, gapiServiceBarFactory) {\r\n\r\n        /* $scope Functions */\r\n        $scope.userPanel = function () {\r\n            console.log('UserPanel');\r\n        };\r\n\r\n        $scope.userSettings = function () {\r\n            console.log('UserSettings');\r\n        };\r\n\r\n        $scope.userHelp = function () {\r\n            console.log('userHelp');\r\n        };\r\n\r\n        $scope.openTicket = function () {\r\n            console.log('openTicket');\r\n        };\r\n\r\n        $scope.logout = function () {\r\n            gapiServiceBarFactory.logout();\r\n        };\r\n\r\n        $scope.redirect = function (url) {\r\n            gapiServiceBarFactory.redirect(url);\r\n        };\r\n\r\n        $scope.getCallbackUrl = function (app) {\r\n\r\n            gapiServiceBarFactory.getCallbackUrl(app._id, function (err, callbackUrl) {\r\n                if (err) {\r\n                    console.log('[ERROR]: ', err);\r\n                }\r\n\r\n                $scope.redirect(callbackUrl);\r\n            });\r\n        };\r\n\r\n        $rootScope.$on('GAPI-LOGOUT', function () {\r\n            console.log('Logout requested');\r\n        });\r\n\r\n        (function () {\r\n            try {\r\n\r\n                // If the user is not logged will be redirected to accounts\r\n                gapiServiceBarFactory.validateUser().then(function () {\r\n\r\n                    // Service Bar User (will get from aruba.js)\r\n                    $scope.user = gapiServiceBarFactory.getUser();\r\n\r\n                    // Service Bar Applications\r\n                    $scope.applications = gapiServiceBarFactory.getApplications();\r\n\r\n                    // Service Bar Notifications\r\n                    $scope.notifications = gapiServiceBarFactory.getNotifications();\r\n\r\n                    // Service Bar Messages\r\n                    $scope.messages = gapiServiceBarFactory.getMessages();\r\n\r\n                });\r\n            } catch (error) {\r\n                console.log('Error validatiing User: ', error);\r\n            }\r\n        }());\r\n\r\n    }\r\n\r\n    GapiServiceBarController.$inject = [ '$scope', '$rootScope', 'gapiServiceBarFactory' ];\r\n\r\n    angular.module('gapiServiceBar').controller('GapiServiceBarController', GapiServiceBarController);\r\n\r\n}());\r\n","/*global angular, console, document, $*/\r\n\r\nfunction GapiServiceBarDirective() {\r\n    \"use strict\";\r\n\r\n    return {\r\n        restrict: 'E',\r\n        templateUrl: '../vendor/gapi-service-bar/gapi-service-bar.html',\r\n        controller: 'GapiServiceBarController',\r\n\r\n        link: function (scope) {\r\n\r\n            scope.openMenu = function ($mdOpenMenu, ev) {\r\n                $mdOpenMenu(ev);\r\n            };\r\n\r\n        }\r\n    };\r\n}\r\n\r\nangular.module('gapiServiceBar').directive('gapiServiceBar', [ '$mdDialog', GapiServiceBarDirective ]);","/*global angular, console, FormData, window*/\r\n/*jslint todo: true */\r\n\r\n(function () {\r\n    \"use strict\";\r\n\r\n    function GapiServiceBarFactory($http, $q, $window, $rootScope, core) {\r\n\r\n        var factory = {\r\n\r\n            validateUser: function () {\r\n\r\n                // Creating Promise\r\n                var tokenDefer = $q.defer(),\r\n                    token;\r\n\r\n                // Checking if it comes from accounts with querystring token\r\n                if (window.location.search.indexOf('token=') === 1) {\r\n\r\n                    // Will set token to localStorage\r\n                    this.setToken(window.location.search.split('=')[1]);\r\n\r\n                } else {\r\n\r\n                    // If there's no token will redirect to accounts to get a new one\r\n                    token = this.getToken();\r\n\r\n                    if (!token) {\r\n                        $window.location.href = this.getAccountsUrl() + '?callbackurl=' + window.location.href;\r\n                        tokenDefer.reject();\r\n                    }\r\n                }\r\n\r\n                // Validating Token against Core Server\r\n                this.validateToken(function (err, userdata) {\r\n\r\n                    if (err) {\r\n                        tokenDefer.reject(err || 'No Data');\r\n                    } else {\r\n\r\n                        // Setting User Data\r\n                        var userObj = {\r\n                            id: userdata.id,\r\n                            username: userdata.username,\r\n                            imageUrl: userdata.imageUrl\r\n                        };\r\n\r\n                        // Storing it on Session Storage\r\n                        $window.localStorage.setItem('GAPI-USER', JSON.stringify(userObj));\r\n\r\n                        // Setting User Applications\r\n                        $window.localStorage.setItem('GAPI-APPS', JSON.stringify(userdata.apps));\r\n\r\n                        // Resolving Promise\r\n                        tokenDefer.resolve();\r\n                    }\r\n                });\r\n\r\n                return tokenDefer.promise;\r\n            },\r\n\r\n            validateToken: function (cb) {\r\n                $http.get(core.getAccountsCoreUrl() + 'me')\r\n                    .success(function (data) {\r\n                        cb(null, data);\r\n                    })\r\n                    .error(function (err) {\r\n                        console.log('[ERROR - validateToken]: ', err);\r\n                        cb(err, null);\r\n                    });\r\n            },\r\n\r\n            setToken: function (token) {\r\n                if (token && token !== 'undefined' && token !== 'null') {\r\n                    $window.localStorage.setItem('GAPI-TOKEN', token);\r\n                }\r\n            },\r\n\r\n            getToken: function () {\r\n                return $window.localStorage.getItem('GAPI-TOKEN');\r\n            },\r\n\r\n            logout: function () {\r\n\r\n                $http.get(core.getAccountsCoreUrl() + 'logout')\r\n                    .success(function (data) {\r\n\r\n                        // Remove User\r\n                        $window.localStorage.removeItem('GAPI-USER');\r\n\r\n                        // Remove Token\r\n                        $window.localStorage.removeItem('GAPI-TOKEN');\r\n\r\n                        // Remove Apps\r\n                        $window.localStorage.removeItem('GAPI-APPS');\r\n\r\n                        // Promise Resolve\r\n                        $rootScope.$broadcast('GAPI-LOGOUT', data);\r\n\r\n                    })\r\n                    .error(function (err) {\r\n                        // Promise Reject\r\n                        $rootScope.$broadcast('GAPI-LOGOUT', err);\r\n                    });\r\n\r\n            },\r\n\r\n            getUser: function () {\r\n                var localGapiUser = $window.localStorage.getItem('GAPI-USER');\r\n                return JSON.parse(localGapiUser);\r\n            },\r\n\r\n            getApplications: function () {\r\n                var localGapiApps = JSON.parse($window.localStorage.getItem('GAPI-APPS'));\r\n                return localGapiApps || [];\r\n            },\r\n\r\n            getNotifications: function () {\r\n                // TODO: Implement Websockets\r\n                return [{\"application\": \"Integra\", \"description\": \"Notificação de Teste\", \"timespan\": \"Agora pouco\"}];\r\n            },\r\n\r\n            getMessages: function () {\r\n                return [];\r\n            },\r\n\r\n            getAccountsUrl: function () {\r\n                return core.getAccountsUrl();\r\n            },\r\n\r\n            redirect: function (url) {\r\n                $window.location.href = url;\r\n            },\r\n\r\n            getCallbackUrl: function (appid, cb) {\r\n                $http.post(core.getAccountsCoreUrl() + '_oauth', {\"appid\": appid})\r\n                    .success(function (data) {\r\n                        if (data.callbackUrl) {\r\n                            cb(null, data.callbackUrl + '?token=' + factory.getToken());\r\n                        } else {\r\n                            cb('CallbackUrl not found');\r\n                        }\r\n                    })\r\n                    .error(function (err) {\r\n                        console.log('[ERROR - validateToken]: ', err);\r\n                        cb(err || 'Server Unavailable', null);\r\n                    });\r\n            }\r\n        };\r\n\r\n        return factory;\r\n\r\n    }\r\n\r\n    GapiServiceBarFactory.$inject = [ '$http', '$q', '$window', '$rootScope', 'coreApiService' ];\r\n\r\n    angular.module('gapiServiceBar').factory('gapiServiceBarFactory', GapiServiceBarFactory);\r\n\r\n}());\r\n","/*global angular, console*/\r\n(function () {\r\n    \"use strict\";\r\n\r\n    function GapiServiceBarRequestInterceptor($q, $window) {\r\n\r\n        return {\r\n\r\n            // On request success\r\n            request: function (config) {\r\n\r\n                // Add Token info to every request\r\n                config.headers.Authorization = $window.localStorage.getItem('GAPI-TOKEN');\r\n\r\n                return config;\r\n            },\r\n\r\n            // On request error\r\n            requestError: function (reason) {\r\n                // Return the promise error reason.\r\n                return $q.reject(reason);\r\n            },\r\n\r\n            // On response success\r\n            response: function (response) {\r\n                // Return the response or promise.\r\n                return response || $q.when(response);\r\n            },\r\n\r\n            // On response error\r\n            responseError: function (reason) {\r\n                // Return the promise error reason.\r\n                return $q.reject(reason);\r\n            }\r\n\r\n        };\r\n    }\r\n\r\n    GapiServiceBarRequestInterceptor.$inject = [ '$q', '$window' ];\r\n\r\n    angular.module('gapiServiceBar').factory('gapiServiceBarRequestInterceptor', GapiServiceBarRequestInterceptor);\r\n\r\n}());\r\n"],"sourceRoot":"/source/"}