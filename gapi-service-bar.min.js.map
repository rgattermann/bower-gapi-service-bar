{"version":3,"sources":["app.module.js","gapi-service-bar-routes.js","gapi-service-bar-controller.js","gapi-service-bar-directive.js","gapi-service-bar-factory.js","gapi-service-bar-request-interceptor.js"],"names":["angular","module","config","$httpProvider","interceptors","push","GapiServiceBarController","$scope","$rootScope","gapiServiceBarFactory","userPanel","console","log","userSettings","userHelp","openTicket","logout","$on","coreUrl","currentApp","validateUser","then","companyName","getCompanyName","currentApplicationName","getCurrentApplication","user","getUser","applications","getApplications","notifications","getNotifications","messages","getMessages","$inject","controller","directive","restrict","templateUrl","link","$","on","this","find","first","stop","slideDown","slideUp","GapiServiceBarFactory","$http","$q","$window","factory","token","tokenDefer","defer","window","location","search","split","setToken","getToken","href","getAccountsUrl","reject","validateToken","err","data","result","localStorage","setItem","JSON","stringify","sessionStorage","resolve","promise","cb","get","success","error","getItem","removeItem","$broadcast","localGapiUser","parse","aplicacao","description","timespan","currentApplication","accountsUrl","origin","GapiServiceBarRequestInterceptor","request","headers","requestError","reason","response","when","responseError"],"mappings":"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","file":"gapi-service-bar.min.js","sourcesContent":["/*global angular,console*/\r\n(function () {\r\n    'use strict';\r\n\r\n    // Module dependencies injection\r\n    angular.module('gapiServiceBar', []);\r\n\r\n}());\r\n","/*global angular */\r\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('gapiServiceBar').config([ '$httpProvider', function ($httpProvider) {\r\n\r\n        // Interceptor to add token on every Header Request\r\n        $httpProvider.interceptors.push('gapiServiceBarRequestInterceptor');\r\n\r\n    }]);\r\n\r\n}());","/*global angular, console, $ */\r\n(function () {\r\n    \"use strict\";\r\n\r\n    function GapiServiceBarController($scope, $rootScope, gapiServiceBarFactory) {\r\n\r\n        /* $scope Functions */\r\n        $scope.userPanel = function () {\r\n            console.log('UserPanel');\r\n        };\r\n\r\n        $scope.userSettings = function () {\r\n            console.log('UserSettings');\r\n        };\r\n\r\n        $scope.userHelp = function () {\r\n            console.log('userHelp');\r\n        };\r\n\r\n        $scope.openTicket = function () {\r\n            console.log('openTicket');\r\n        };\r\n\r\n        $scope.logout = function () {\r\n            gapiServiceBarFactory.logout();\r\n        };\r\n\r\n        $rootScope.$on('GAPI-LOGOUT', function () {\r\n            console.log('GAPI-SERVICE-BAR (-.-) LOGOUT');\r\n        });\r\n\r\n        (function () {\r\n\r\n            // If the user is not logged will be redirected to accounts\r\n            var coreUrl    = 'http://localhost:5000/api/v1/',\r\n                currentApp = 'Accounts';\r\n\r\n            gapiServiceBarFactory.validateUser(coreUrl, currentApp).then(function () {\r\n\r\n                // Service Bar Title\r\n                $scope.companyName = gapiServiceBarFactory.getCompanyName();\r\n\r\n                // Service Bar Application Name\r\n                $scope.currentApplicationName = gapiServiceBarFactory.getCurrentApplication();\r\n\r\n                // Service Bar User\r\n                $scope.user = gapiServiceBarFactory.getUser();\r\n\r\n                // Service Bar Applications\r\n                $scope.applications = gapiServiceBarFactory.getApplications();\r\n\r\n                // Service Bar Notifications\r\n                $scope.notifications = gapiServiceBarFactory.getNotifications();\r\n\r\n                // Service Bar Messages\r\n                $scope.messages = gapiServiceBarFactory.getMessages();\r\n            });\r\n\r\n        }());\r\n\r\n    }\r\n\r\n    GapiServiceBarController.$inject = [ '$scope', '$rootScope', 'gapiServiceBarFactory' ];\r\n\r\n    angular.module('gapiServiceBar').controller('GapiServiceBarController', GapiServiceBarController);\r\n\r\n}());\r\n","/*global angular, console, document, $*/\r\n\r\nangular.module('gapiServiceBar').directive('gapiServiceBar', function () {\r\n    \"use strict\";\r\n\r\n    return {\r\n        restrict: 'E',\r\n        templateUrl: '../vendor/gapi-service-bar/gapi-service-bar.html',\r\n        controller: 'GapiServiceBarController',\r\n\r\n        link: function () {\r\n\r\n            (function () {\r\n\r\n                // Add slidedown animation to dropdown\r\n                $('.dropdown').on('show.bs.dropdown', function () {\r\n                    $(this).find('.dropdown-menu').first().stop(true, true).slideDown();\r\n                });\r\n\r\n                // Add slideup animation to dropdown\r\n                $('.dropdown').on('hide.bs.dropdown', function () {\r\n                    $(this).find('.dropdown-menu').first().stop(true, true).slideUp();\r\n                });\r\n\r\n            }());\r\n\r\n        }\r\n    };\r\n\r\n});\r\n","/*global angular, console, FormData, window*/\r\n/*jslint todo: true */\r\n\r\n(function () {\r\n    \"use strict\";\r\n\r\n    function GapiServiceBarFactory($http, $q, $window, $rootScope) {\r\n\r\n        var factory = {\r\n\r\n            validateUser: function (coreUrl, currentApp) {\r\n\r\n                // Creating Promise\r\n                var tokenDefer = $q.defer(),\r\n                    token;\r\n\r\n                // Checking if it comes from accounts with querystring token\r\n                if (window.location.search.split('=')[1]) {\r\n                    // Will set token to SessionStorage\r\n                    this.setToken(window.location.search.split('=')[1]);\r\n                } else {\r\n\r\n                    // If there's no token will redirect to accounts to get a new one\r\n                    token = this.getToken();\r\n                    if (!token) {\r\n                        $window.location.href = this.getAccountsUrl();\r\n                        tokenDefer.reject();\r\n                    }\r\n                }\r\n\r\n                // Validating Token against Core Server\r\n                this.validateToken(coreUrl, function (err, data) {\r\n\r\n                    if (err || !data.result) {\r\n                        tokenDefer.reject(err || 'No Data');\r\n                    }\r\n\r\n                    // Setting User Data\r\n                    $window.localStorage.setItem('GAPI-USER', JSON.stringify(data.result));\r\n\r\n                    // Setting up it as the Current Application\r\n                    $window.sessionStorage.setItem('GAPI-CURRENT-APPLICATION', currentApp || 'Integra');\r\n\r\n                    // Resolving Promise\r\n                    tokenDefer.resolve();\r\n                });\r\n\r\n                return tokenDefer.promise;\r\n            },\r\n\r\n            validateToken: function (coreUrl, cb) {\r\n                $http.get(coreUrl + 'accounts/credentials/me')\r\n                    .success(function (data) {\r\n                        cb(null, data);\r\n                    })\r\n                    .error(function (err) {\r\n                        console.log('[ERROR - validateToken]: ', err);\r\n                        cb(err, null);\r\n                    });\r\n            },\r\n\r\n            setToken: function (token) {\r\n                $window.localStorage.setItem('GAPI-TOKEN', token);\r\n            },\r\n\r\n            getToken: function () {\r\n                return $window.localStorage.getItem('GAPI-TOKEN');\r\n            },\r\n\r\n            logout: function (coreUrl) {\r\n\r\n                $http.get(coreUrl + 'accounts/credentials/_logout/')\r\n                    .success(function (data) {\r\n                        // Remove User\r\n                        $window.localStorage.removeItem('GAPI-USER');\r\n\r\n                        // Remove Token\r\n                        $window.sessionStorage.removeItem('GAPI-TOKEN');\r\n\r\n                        // Promise Resolve\r\n                        $rootScope.$broadcast('GAPI-LOGOUT', data);\r\n                    })\r\n                    .error(function (err) {\r\n                        // Promise Reject\r\n                        $rootScope.$broadcast('GAPI-LOGOUT', err);\r\n                    });\r\n\r\n            },\r\n\r\n            getUser: function () {\r\n                var localGapiUser = JSON.parse($window.localStorage.getItem('GAPI-USER'));\r\n                return localGapiUser.user;\r\n            },\r\n\r\n            getCompanyName: function () {\r\n                return 'Cliente';\r\n            },\r\n\r\n            getApplications: function () {\r\n                var localGapiUser = JSON.parse($window.localStorage.getItem('GAPI-USER'));\r\n                return localGapiUser.applications;\r\n            },\r\n\r\n            getNotifications: function () {\r\n                // TODO: Implement Websockets\r\n                return [{\"aplicacao\": \"Integra\", \"description\": \"Notificação de Teste\", \"timespan\": \"Agora pouco\"}];\r\n            },\r\n\r\n            getMessages: function () {\r\n                return [];\r\n            },\r\n\r\n            getCurrentApplication: function () {\r\n                var currentApplication = $window.sessionStorage['GAPI-CURRENT-APPLICATION'];\r\n                return currentApplication + ' | ';\r\n            },\r\n\r\n            getAccountsUrl: function (accountsUrl) {\r\n                return accountsUrl || 'http://localhost:8000?callbackurl=' + $window.location.origin;\r\n            }\r\n\r\n        };\r\n\r\n        return factory;\r\n\r\n    }\r\n\r\n    GapiServiceBarFactory.$inject = [ '$http', '$q', '$window', '$rootScope' ];\r\n\r\n    angular.module('gapiServiceBar').factory('gapiServiceBarFactory', GapiServiceBarFactory);\r\n\r\n}());\r\n","/*global angular, console*/\r\n(function () {\r\n    \"use strict\";\r\n\r\n    function GapiServiceBarRequestInterceptor($q, $window) {\r\n\r\n        return {\r\n\r\n            // On request success\r\n            request: function (config) {\r\n                // Add Token info to every request\r\n                config.headers['X-Session-Token'] = $window.localStorage.getItem('GAPI-TOKEN');\r\n\r\n                return config;\r\n            },\r\n\r\n            // On request error\r\n            requestError: function (reason) {\r\n                // Return the promise error reason.\r\n                return $q.reject(reason);\r\n            },\r\n\r\n            // On response success\r\n            response: function (response) {\r\n                // Return the response or promise.\r\n                return response || $q.when(response);\r\n            },\r\n\r\n            // On response error\r\n            responseError: function (reason) {\r\n                // Return the promise error reason.\r\n                return $q.reject(reason);\r\n            }\r\n\r\n        };\r\n    }\r\n\r\n    GapiServiceBarRequestInterceptor.$inject = [ '$q', '$window' ];\r\n\r\n    angular.module('gapiServiceBar').factory('gapiServiceBarRequestInterceptor', GapiServiceBarRequestInterceptor);\r\n\r\n}());\r\n"],"sourceRoot":"/source/"}