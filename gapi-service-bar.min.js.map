{"version":3,"sources":["app.module.js","gapi-service-bar-routes.js","gapi-service-bar-controller.js","gapi-service-bar-directive.js","gapi-service-bar-factory.js","gapi-service-bar-websocket-factory.js","gapi-service-bar-request-interceptor.js"],"names":[],"mappingspxfile":"gapi-service-bar.min.js","sourcesContent":["/*global angular,console*/\n(function () {\n    'use strict';\n\n    // Module dependencies injection\n    angular.module('gapiServiceBar', [ 'aruba.js', 'ngMaterial', 'datetime' ]);\n\n}());\n","/*global angular */\n(function () {\n    'use strict';\n\n    angular.module('gapiServiceBar').config(['$httpProvider', function ($httpProvider) {\n\n        // Interceptor that add token in each Header Request\n        $httpProvider.interceptors.push('gapiServiceBarRequestInterceptor');\n\n    }]);\n\n}());","/*jslint nomen:true*/\n/*global console, angular, alert*/\n\n(function () {\n    \"use strict\";\n\n    function GapiServiceBarController($scope, $rootScope, gapiServiceBarFactory, $timeout, datetime) {\n\n        $scope.notifications = [];\n\n        /* $scope Functions */\n        $scope.userPanel = function () {\n            console.log('UserPanel');\n        };\n\n        $scope.userSettings = function () {\n            console.log('UserSettings');\n        };\n\n        $scope.userHelp = function () {\n            console.log('userHelp');\n        };\n\n        $scope.openTicket = function () {\n            console.log('openTicket');\n        };\n\n        $scope.logout = function () {\n            gapiServiceBarFactory.logout();\n        };\n\n        $scope.redirect = function (url) {\n            gapiServiceBarFactory.redirect(url);\n        };\n\n        $scope.getCallbackUrl = function (app) {\n\n            $rootScope.$emit('GAPI-SERVICE-BAR-ISLOADING', true);\n\n            gapiServiceBarFactory.getCallbackUrl(app._id, function (err, callbackUrl) {\n                if (err) {\n                    console.log('[ERROR]: ', err);\n                }\n\n                $rootScope.$emit('GAPI-SERVICE-BAR-ISLOADING', false);\n                $scope.redirect(callbackUrl);\n            });\n        };\n\n        $scope.reconnectWebsocket = function () {\n            $rootScope.isWebsocketLoading = false;\n            $rootScope.isWebsocketConnected = true;\n            gapiServiceBarFactory.getNotifications();\n        };\n\n        $scope.markAsRead = function (notification, isMarkAll) {\n\n            if (notification && Array.isArray(notification.arrayIds)) {\n                $scope.notifications.map(function (item) {\n                    notification.arrayIds.map(function (id) {\n                        if (id === item._id) {\n                            item.read = true;\n                        }\n                    });\n                });\n            } else {\n\n                if (isMarkAll) {\n                    var arrayids = [];\n\n                    $scope.notifications.map(function (item) {\n                        if (item.read === false) {\n                            arrayids.push(item._id.toString());\n                        }\n                    });\n\n                    gapiServiceBarFactory.setAsRead({\n                        arrayRemindersId: arrayids,\n                        markAllAsRead: true\n                    });\n\n                } else {\n\n                    $scope.notifications.map(function (n) {\n                        if (notification._id === n._id) {\n                            if (!notification.savedOnServer) {\n                                gapiServiceBarFactory.setAsRead({ 'reminder_id': notification._id });\n                            } else {\n                                n.read = true;\n                            }\n                        }\n                    });\n                }\n            }\n\n            // notifications counter\n            $scope.getUnreadNotifications();\n        };\n\n        $scope.getUnreadNotifications = function () {\n            var count = 0;\n            $scope.notifications.map(function (item) {\n                if (item.read === false) {\n                    count += 1;\n                }\n            });\n\n            $scope.unreadNotificationsCount = count;\n        };\n\n        function parseNotificationsDatetime() {\n            var parser = datetime(\"dd-MM-yyyy HH:mm\");\n            $scope.notifications.map(function (n) {\n                $timeout(function () {\n                    parser.setDate(new Date(n.doc.date));\n                    n.doc.date = parser.getText();\n                });\n            });\n        }\n\n        (function () {\n            try {\n\n                $rootScope.$emit('GAPI-SERVICE-BAR-ISLOADING', true);\n\n                $rootScope.$on('GAPI-SERVICE-BAR-NOTIFICATION', function (ev, notificationData) {\n\n                    if (ev && notificationData) {\n\n                        if (notificationData.markedAsRead) {\n                            $scope.markAsRead({\n                                _id: notificationData.reminder_id,\n                                savedOnServer: true\n                            });\n\n                            return;\n                        }\n\n                        if (notificationData.markAllAsRead) {\n                            $scope.markAsRead({\n                                arrayIds: notificationData.arrayRemindersId,\n                                savedOnServer: true\n                            });\n\n                            return;\n                        }\n\n                        $timeout(function () {\n\n                            $scope.isNotificationAdded = true;\n\n                            if (notificationData.length > 1) {\n\n                                $scope.notifications = notificationData;\n\n                                // Timeout necessary to perform bell animation\n                                $timeout(function () {\n                                    $scope.isNotificationAdded = false;\n                                }, 1500);\n                            } else {\n                                $scope.notifications.push(notificationData[0]);\n\n                                // Timeout necessary to perform bell animation\n                                $timeout(function () {\n                                    $scope.isNotificationAdded = false;\n                                }, 1500);\n                            }\n\n\n                            // will format each notification datetime\n                            parseNotificationsDatetime();\n\n                            // notifications counter\n                            $scope.getUnreadNotifications();\n\n                        });\n\n                    }\n                });\n\n                // If the user is not logged will be redirected to accounts\n                gapiServiceBarFactory.validateUser().then(function () {\n\n                    // Service Bar User (will get from aruba.js)\n                    gapiServiceBarFactory.getUser(function (err, userData) {\n                        if (err) {\n                            console.log(err);\n                            return;\n                        }\n\n                        $scope.user = userData;\n                    });\n\n                    // Websocket notifications start\n                    gapiServiceBarFactory.getNotifications();\n\n                    // Service Bar Messages\n                    $scope.messages = gapiServiceBarFactory.getMessages();\n\n                    // Service Bar Applications\n                    $scope.applications = gapiServiceBarFactory.getApplications();\n\n                    $rootScope.$emit('GAPI-SERVICE-BAR-ISLOADING', false);\n\n                });\n            } catch (error) {\n                console.log('Error validatiing User: ', error);\n                $rootScope.$emit('GAPI-SERVICE-BAR-ISLOADING', false);\n            }\n        }());\n\n    }\n\n    GapiServiceBarController.$inject = ['$scope', '$rootScope', 'gapiServiceBarFactory', '$timeout', 'datetime'];\n\n    angular.module('gapiServiceBar').controller('GapiServiceBarController', GapiServiceBarController);\n\n}());\n","/*global angular, console, document, $*/\n(function () {\n    \"use strict\";\n    function GapiServiceBarDirective() {\n\n        return {\n            restrict: 'E',\n            templateUrl: '../vendor/gapi-service-bar/gapi-service-bar.html',\n            controller: 'GapiServiceBarController',\n\n            link: function (scope) {\n                scope.openMenu = function ($mdOpenMenu, ev) {\n                    $mdOpenMenu(ev);\n                };\n            }\n        };\n    }\n\n    angular.module('gapiServiceBar').directive('gapiServiceBar', ['$mdDialog', GapiServiceBarDirective]);\n}());\n","\n/*global angular, console, FormData, window, WebSocket, Blob, URL, $, document*/\n/*jslint todo: true */\n\n(function () {\n    \"use strict\";\n\n    var factory;\n\n    function GapiServiceBarFactory($http, $q, $window, $rootScope, core, websocketFactory) {\n\n        factory = {\n\n            validateUser: function () {\n\n                var tokenDefer = $q.defer(),\n                    token,\n                    queryString = $window.localStorage.getItem('QUERY-STRING') || window.location.search;\n\n                // Checking if it comes from accounts with querystring token\n                if (queryString.indexOf('token=') === 1) {\n\n                    // Will set token to localStorage\n                    this.setToken(queryString.split('=')[1]);\n\n                } else {\n\n                    // If there's no token will redirect to accounts to get a new one\n                    token = this.getToken();\n\n                    if (!token) {\n                        $window.location.href = core.getAccountsUrl() + '?callbackurl=' + window.location.href;\n                        tokenDefer.reject();\n                    }\n                }\n\n                // Validating Token against Core Server url: /me'\n                this.validateToken(function (err, userdata) {\n\n                    if (err || !userdata) {\n\n                        $window.location.href = core.getAccountsUrl() + '?callbackurl=' + window.location.href;\n                        console.error(err || 'No Data - check server availability');\n                        tokenDefer.reject(err || 'No Data - check server availability');\n\n                    } else {\n\n                        // Setting User Applications\n                        $window.localStorage.setItem('GAPI-APPS', JSON.stringify(userdata.apps));\n\n                        // Removing apps to include only user data\n                        delete userdata.apps;\n\n                        // Storing it on Session Storage\n                        $window.localStorage.setItem('GAPI-USER', JSON.stringify(userdata));\n\n                        // Resolving Promise\n                        tokenDefer.resolve();\n                    }\n                });\n\n                return tokenDefer.promise;\n            },\n\n            validateToken: function (cb) {\n                $http.get(core.getAccountsCoreUrl() + 'me')\n                    .success(function (data) {\n                        cb(null, data);\n                    })\n                    .error(function (err) {\n                        console.log('[ERROR - validateToken]: ', err);\n                        cb(err, null);\n                    });\n            },\n\n            setToken: function (token) {\n                if (token && token !== 'undefined' && token !== 'null') {\n                    $window.localStorage.setItem('GAPI-TOKEN', token);\n                }\n            },\n\n            getToken: function () {\n\n                return $window.localStorage.getItem('GAPI-TOKEN');\n            },\n\n            logout: function () {\n\n                $http.post(core.getAccountsCoreUrl() + 'logout')\n                    .success(function () {\n\n                        // Local Storage clean up\n                        $window.localStorage.removeItem('GAPI-USER');\n                        $window.localStorage.removeItem('GAPI-TOKEN');\n                        $window.localStorage.removeItem('GAPI-APPS');\n\n                        // Promise Resolve\n                        $rootScope.$broadcast('GAPI-SERVICE-BAR-LOGOUT');\n                    })\n                    .error(function (err) {\n                        $rootScope.$broadcast('GAPI-SERVICE-BAR-LOGOUT', {\n                            \"error: \": err\n                        });\n                    });\n            },\n\n            getUser: function (cb) {\n                var localGapiUser = $window.localStorage.getItem('GAPI-USER');\n\n                if (localGapiUser) {\n                    localGapiUser = JSON.parse(localGapiUser);\n\n                    $http.get(core.getAccountsCoreUrl() + 'credentials/' + localGapiUser.id || localGapiUser._id)\n                        .success(function (userData) {\n                            if (userData) {\n                                delete userData.pwd;\n                                $window.localStorage.setItem('GAPI-APPS', JSON.stringify(userData.apps));\n                                delete userData.apps;\n                                $window.localStorage.setItem('GAPI-USER', JSON.stringify(userData));\n\n                                // Get image\n                                $http.get(core.getAccountsCoreUrl() + 'credentials/public?imagepath=' + userData.imageUrl.split('/')[3], { responseType: 'arraybuffer'})\n                                    .success(function (imageDownloadData) {\n\n                                        var blob      = new Blob([imageDownloadData], {type: 'image/jpeg'}),\n                                            objectUrl = URL.createObjectURL(blob);\n\n                                        userData.binaryImage = objectUrl;\n                                        $('#gsbProfileImage').css('src', 'url(' + objectUrl + ')');\n\n                                        return cb(null, userData);\n                                    })\n                                    .error(function () {\n                                        return cb(null, userData);\n                                    });\n                            }\n\n                        })\n                        .error(function (err) {\n                            console.log('[ERROR - validateToken]: ', err);\n                            cb(err, null);\n                        });\n                }\n\n            },\n\n            // It will connects the websocket and wait for pushs on {GAPI-SERVICE-BAR-NOTIFICATION} $broadcast\n            // it also has reconnect capability\n            getNotifications: function () {\n                websocketFactory.connect();\n            },\n\n            getApplications: function () {\n                var localGapiApps = JSON.parse($window.localStorage.getItem('GAPI-APPS'));\n                return localGapiApps || [];\n            },\n\n            setAsRead: function (reminder_id) {\n                websocketFactory.setAsRead(reminder_id);\n            },\n\n            getMessages: function () {\n                return [];\n            },\n\n            getAccountsUrl: function () {\n                return core.getAccountsUrl();\n            },\n\n            redirect: function (url) {\n                $window.location.href = url;\n            },\n\n            getCallbackUrl: function (appid, cb) {\n                $http.post(core.getAccountsCoreUrl() + '_oauth', {\n                    \"appid\": appid\n                })\n                    .success(function (data) {\n                        if (data.callbackUrl) {\n                            cb(null, data.callbackUrl + '?token=' + factory.getToken());\n                        } else {\n                            cb('CallbackUrl not found');\n                        }\n                    })\n                    .error(function (err) {\n                        console.log('[ERROR - validateToken]: ', err);\n                        cb(err || 'Server Unavailable', null);\n                    });\n            }\n        };\n\n        return factory;\n\n    }\n\n    GapiServiceBarFactory.$inject = ['$http', '$q', '$window', '$rootScope', 'coreApiService', 'websocketFactory'];\n\n    angular.module('gapiServiceBar').factory('gapiServiceBarFactory', GapiServiceBarFactory);\n\n}());\n","/*global angular, console, FormData, window, WebSocket*/\n/*jslint todo: true */\n\n(function () {\n    \"use strict\";\n\n    var factory, ws, currentToken;\n\n    function GapiServiceBarWebsocketFactory($rootScope, $window, $timeout, core) {\n\n        factory = {\n\n            connect: function () {\n\n\n                if ($rootScope.websocket) {\n                    return;\n                }\n\n                $rootScope.isWebsocketLoading = true;\n                $rootScope.isWebsocketConnected = false;\n\n                currentToken = $window.localStorage.getItem('GAPI-TOKEN');\n                ws = new WebSocket(core.getAppCoreUrl().replace('http', 'ws').split(\"/api\")[0] + '?token=' + currentToken);\n\n                // When gets connected\n                ws.onopen = function (ev) {\n                    $timeout(function () {\n                        console.log('WebSocket connected type: [' + ev.type + ']');\n                        $window.localStorage.removeItem('GAPI-WEBSOCKET-RECONNECT');\n                        $rootScope.isWebsocketConnected = true;\n                        $rootScope.isWebsocketLoading = false;\n                    });\n                };\n\n                // When the connection gets closed\n                // Firstly it will try to reconnect after 30s\n                // On a second shot it will try to reconnect after 60s\n                ws.onclose = function () {\n\n                    var isSecondShot = !!$window.sessionStorage.getItem('GAPI-WEBSOCKET-RECONNECT');\n\n                    console.log('WebSocket disconnected, to reconnect click on the bell at the top bar and click on reconnect.');\n\n                    if (!isSecondShot) {\n                        $window.sessionStorage.setItem('GAPI-WEBSOCKET-RECONNECT', true);\n                    }\n\n                    $timeout(function () {\n                        $rootScope.isWebsocketConnected = false;\n                        $rootScope.isWebsocketLoading   = false;\n                        $rootScope.websocket            = null;\n                    });\n\n                    $timeout(function () {\n                        factory.connect();\n                    }, isSecondShot ? 60000 : 30000);\n                };\n\n                // Error handling\n                ws.onerror = function (err) {\n                    $rootScope.isWebsocketConnected = $rootScope.isWebsocketLoading = false;\n                    $rootScope.websocket            = null;\n                    console.log('WebSocket Error [' + JSON.stringify(err) + ']');\n                };\n\n                // When a message comes\n                ws.onmessage = function (message) {\n                    if (message.data) {\n                        $rootScope.$broadcast('GAPI-SERVICE-BAR-NOTIFICATION', JSON.parse(message.data));\n                    }\n                };\n\n                $rootScope.websocket = ws;\n\n            },\n\n            setAsRead: function (reminder_id) {\n                if (!$rootScope.websocket || !reminder_id) {\n                    return;\n                }\n\n                $rootScope.websocket.send(JSON.stringify(reminder_id));\n            }\n        };\n\n        return factory;\n\n    }\n\n    GapiServiceBarWebsocketFactory.$inject = ['$rootScope', '$window', '$timeout', 'coreApiService'];\n\n    angular.module('gapiServiceBar').factory('websocketFactory', GapiServiceBarWebsocketFactory);\n\n}());","/*global angular, console*/\n(function () {\n    \"use strict\";\n\n    function GapiServiceBarRequestInterceptor($q, $window) {\n\n        return {\n\n            // On request success\n            request: function (config) {\n\n                // Add Token info to every request\n                config.headers.Authorization = $window.localStorage.getItem('GAPI-TOKEN');\n\n                return config;\n            },\n\n            // On request error\n            requestError: function (reason) {\n                // Return the promise error reason.\n                return $q.reject(reason);\n            },\n\n            // On response success\n            response: function (response) {\n                // Return the response or promise.\n                return response || $q.when(response);\n            },\n\n            // On response error\n            responseError: function (reason) {\n                // Return the promise error reason.\n                return $q.reject(reason);\n            }\n\n        };\n    }\n\n    GapiServiceBarRequestInterceptor.$inject = [ '$q', '$window' ];\n\n    angular.module('gapiServiceBar').factory('gapiServiceBarRequestInterceptor', GapiServiceBarRequestInterceptor);\n\n}());\n"],"sourceRoot":"/source/"}