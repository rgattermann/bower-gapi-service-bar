{"version":3,"sources":["app.module.js","gapi-service-bar-routes.js","gapi-service-bar-controller.js","gapi-service-bar-directive.js","gapi-service-bar-factory.js","gapi-service-bar-websocket-factory.js","gapi-service-bar-request-interceptor.js"],"names":[],"mappingslxfile":"gapi-service-bar.min.js","sourcesContent":["/*global angular,console*/\r\n(function () {\r\n    'use strict';\r\n\r\n    // Module dependencies injection\r\n    angular.module('gapiServiceBar', [ 'aruba.js', 'ngMaterial', 'datetime' ]);\r\n\r\n}());\r\n","/*global angular */\r\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('gapiServiceBar').config(['$httpProvider', function ($httpProvider) {\r\n\r\n        // Interceptor that add token in each Header Request\r\n        $httpProvider.interceptors.push('gapiServiceBarRequestInterceptor');\r\n\r\n    }]);\r\n\r\n}());","/*jslint nomen:true*/\r\n/*global console, angular, alert*/\r\n\r\n(function () {\r\n    \"use strict\";\r\n\r\n    function GapiServiceBarController($scope, $rootScope, gapiServiceBarFactory, $timeout, datetime) {\r\n\r\n        $scope.notifications = [];\r\n\r\n        /* $scope Functions */\r\n        $scope.userPanel = function () {\r\n            console.log('UserPanel');\r\n        };\r\n\r\n        $scope.userSettings = function () {\r\n            console.log('UserSettings');\r\n        };\r\n\r\n        $scope.userHelp = function () {\r\n            console.log('userHelp');\r\n        };\r\n\r\n        $scope.openTicket = function () {\r\n            console.log('openTicket');\r\n        };\r\n\r\n        $scope.logout = function () {\r\n            gapiServiceBarFactory.logout();\r\n        };\r\n\r\n        $scope.redirect = function (url) {\r\n            gapiServiceBarFactory.redirect(url);\r\n        };\r\n\r\n        $scope.getCallbackUrl = function (app) {\r\n\r\n            $rootScope.$emit('GAPI-SERVICE-BAR-ISLOADING', true);\r\n\r\n            gapiServiceBarFactory.getCallbackUrl(app._id, function (err, callbackUrl) {\r\n                if (err) {\r\n                    console.log('[ERROR]: ', err);\r\n                }\r\n\r\n                $rootScope.$emit('GAPI-SERVICE-BAR-ISLOADING', false);\r\n                $scope.redirect(callbackUrl);\r\n            });\r\n        };\r\n\r\n        $scope.reconnectWebsocket = function () {\r\n            $rootScope.isWebsocketLoading = false;\r\n            $rootScope.isWebsocketConnected = true;\r\n            gapiServiceBarFactory.getNotifications();\r\n        };\r\n\r\n        $scope.markAsRead = function (notification, isMarkAll) {\r\n\r\n            if (notification && Array.isArray(notification.arrayIds)) {\r\n                $scope.notifications.map(function (item) {\r\n                    notification.arrayIds.map(function (id) {\r\n                        if (id === item._id) {\r\n                            item.read = true;\r\n                        }\r\n                    });\r\n                });\r\n            } else {\r\n\r\n                if (isMarkAll) {\r\n                    var arrayids = [];\r\n\r\n                    $scope.notifications.map(function (item) {\r\n                        if (item.read === false) {\r\n                            arrayids.push(item._id.toString());\r\n                        }\r\n                    });\r\n\r\n                    gapiServiceBarFactory.setAsRead({\r\n                        arrayRemindersId: arrayids,\r\n                        markAllAsRead: true\r\n                    });\r\n\r\n                } else {\r\n\r\n                    $scope.notifications.map(function (n) {\r\n                        if (notification._id === n._id) {\r\n                            if (!notification.savedOnServer) {\r\n                                gapiServiceBarFactory.setAsRead({ 'reminder_id': notification._id });\r\n                            } else {\r\n                                n.read = true;\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n\r\n            // notifications counter\r\n            $scope.getUnreadNotifications();\r\n        };\r\n\r\n        $scope.getUnreadNotifications = function () {\r\n            var count = 0;\r\n            $scope.notifications.map(function (item) {\r\n                if (item.read === false) {\r\n                    count += 1;\r\n                }\r\n            });\r\n\r\n            $scope.unreadNotificationsCount = count;\r\n        };\r\n\r\n        function parseNotificationsDatetime() {\r\n            var parser = datetime(\"dd-MM-yyyy HH:mm\");\r\n            $scope.notifications.map(function (n) {\r\n                $timeout(function () {\r\n                    parser.setDate(new Date(n.doc.date));\r\n                    n.doc.date = parser.getText();\r\n                });\r\n            });\r\n        }\r\n\r\n        (function () {\r\n            try {\r\n\r\n                $rootScope.$emit('GAPI-SERVICE-BAR-ISLOADING', true);\r\n\r\n                $rootScope.$on('GAPI-SERVICE-BAR-NOTIFICATION', function (ev, notificationData) {\r\n\r\n                    if (ev && notificationData) {\r\n\r\n                        if (notificationData.markedAsRead) {\r\n                            $scope.markAsRead({\r\n                                _id: notificationData.reminder_id,\r\n                                savedOnServer: true\r\n                            });\r\n\r\n                            return;\r\n                        }\r\n\r\n                        if (notificationData.markAllAsRead) {\r\n                            $scope.markAsRead({\r\n                                arrayIds: notificationData.arrayRemindersId,\r\n                                savedOnServer: true\r\n                            });\r\n\r\n                            return;\r\n                        }\r\n\r\n                        $timeout(function () {\r\n\r\n                            $scope.isNotificationAdded = true;\r\n\r\n                            if (notificationData.length > 1) {\r\n\r\n                                $scope.notifications = notificationData;\r\n\r\n                                // Timeout necessary to perform bell animation\r\n                                $timeout(function () {\r\n                                    $scope.isNotificationAdded = false;\r\n                                }, 1500);\r\n                            } else {\r\n                                $scope.notifications.push(notificationData[0]);\r\n\r\n                                // Timeout necessary to perform bell animation\r\n                                $timeout(function () {\r\n                                    $scope.isNotificationAdded = false;\r\n                                }, 1500);\r\n                            }\r\n\r\n\r\n                            // will format each notification datetime\r\n                            parseNotificationsDatetime();\r\n\r\n                            // notifications counter\r\n                            $scope.getUnreadNotifications();\r\n\r\n                        });\r\n\r\n                    }\r\n                });\r\n\r\n                // If the user is not logged will be redirected to accounts\r\n                gapiServiceBarFactory.validateUser().then(function () {\r\n\r\n                    // Service Bar User (will get from aruba.js)\r\n                    gapiServiceBarFactory.getUser(function (err, userData) {\r\n                        if (err) {\r\n                            console.log(err);\r\n                            return;\r\n                        }\r\n\r\n                        $scope.user = userData;\r\n                    });\r\n\r\n                    // Websocket notifications start\r\n                    gapiServiceBarFactory.getNotifications();\r\n\r\n                    // Service Bar Messages\r\n                    $scope.messages = gapiServiceBarFactory.getMessages();\r\n\r\n                    // Service Bar Applications\r\n                    $scope.applications = gapiServiceBarFactory.getApplications();\r\n\r\n                    $rootScope.$emit('GAPI-SERVICE-BAR-ISLOADING', false);\r\n\r\n                });\r\n            } catch (error) {\r\n                console.log('Error validatiing User: ', error);\r\n                $rootScope.$emit('GAPI-SERVICE-BAR-ISLOADING', false);\r\n            }\r\n        }());\r\n\r\n    }\r\n\r\n    GapiServiceBarController.$inject = ['$scope', '$rootScope', 'gapiServiceBarFactory', '$timeout', 'datetime'];\r\n\r\n    angular.module('gapiServiceBar').controller('GapiServiceBarController', GapiServiceBarController);\r\n\r\n}());\r\n","/*global angular, console, document, $*/\r\n\r\nfunction GapiServiceBarDirective() {\r\n    \"use strict\";\r\n\r\n    return {\r\n        restrict: 'E',\r\n        templateUrl: '../vendor/gapi-service-bar/gapi-service-bar.html',\r\n        controller: 'GapiServiceBarController',\r\n\r\n        link: function (scope) {\r\n            scope.openMenu = function ($mdOpenMenu, ev) {\r\n                $mdOpenMenu(ev);\r\n            };\r\n        }\r\n    };\r\n}\r\n\r\nangular.module('gapiServiceBar').directive('gapiServiceBar', ['$mdDialog', GapiServiceBarDirective]);","\r\n/*global angular, console, FormData, window, WebSocket, Blob, URL, $*/\r\n/*jslint todo: true */\r\n\r\n(function () {\r\n    \"use strict\";\r\n\r\n    var factory;\r\n\r\n    function GapiServiceBarFactory($http, $q, $window, $rootScope, core, websocketFactory) {\r\n\r\n        factory = {\r\n\r\n            validateUser: function () {\r\n\r\n                var tokenDefer = $q.defer(),\r\n                    token;\r\n\r\n                // Checking if it comes from accounts with querystring token\r\n                if (window.location.search.indexOf('token=') === 1) {\r\n\r\n                    // Will set token to localStorage\r\n                    this.setToken(window.location.search.split('=')[1]);\r\n\r\n                } else {\r\n\r\n                    // If there's no token will redirect to accounts to get a new one\r\n                    token = this.getToken();\r\n\r\n                    if (!token) {\r\n                        $window.location.href = core.getAccountsUrl() + '?callbackurl=' + window.location.href;\r\n                        tokenDefer.reject();\r\n                    }\r\n                }\r\n\r\n                // Validating Token against Core Server url: /me'\r\n                this.validateToken(function (err, userdata) {\r\n\r\n                    if (err || !userdata) {\r\n\r\n                        $window.location.href = core.getAccountsUrl() + '?callbackurl=' + window.location.href;\r\n                        console.error(err || 'No Data - check server availability');\r\n                        tokenDefer.reject(err || 'No Data - check server availability');\r\n\r\n                    } else {\r\n\r\n                        // Setting User Applications\r\n                        $window.localStorage.setItem('GAPI-APPS', JSON.stringify(userdata.apps));\r\n\r\n                        // Removing apps to include only user data\r\n                        delete userdata.apps;\r\n\r\n                        // Storing it on Session Storage\r\n                        $window.localStorage.setItem('GAPI-USER', JSON.stringify(userdata));\r\n\r\n                        // Resolving Promise\r\n                        tokenDefer.resolve();\r\n                    }\r\n                });\r\n\r\n                return tokenDefer.promise;\r\n            },\r\n\r\n            validateToken: function (cb) {\r\n                $http.get(core.getAccountsCoreUrl() + 'me')\r\n                    .success(function (data) {\r\n                        cb(null, data);\r\n                    })\r\n                    .error(function (err) {\r\n                        console.log('[ERROR - validateToken]: ', err);\r\n                        cb(err, null);\r\n                    });\r\n            },\r\n\r\n            setToken: function (token) {\r\n                if (token && token !== 'undefined' && token !== 'null') {\r\n                    $window.localStorage.setItem('GAPI-TOKEN', token);\r\n                }\r\n            },\r\n\r\n            getToken: function () {\r\n\r\n                return $window.localStorage.getItem('GAPI-TOKEN');\r\n            },\r\n\r\n            logout: function () {\r\n\r\n                $http.get(core.getAccountsCoreUrl() + 'logout')\r\n                    .success(function () {\r\n\r\n                        // Local Storage clean up\r\n                        $window.localStorage.removeItem('GAPI-USER');\r\n                        $window.localStorage.removeItem('GAPI-TOKEN');\r\n                        $window.localStorage.removeItem('GAPI-APPS');\r\n\r\n                        // Promise Resolve\r\n                        $rootScope.$broadcast('GAPI-SERVICE-BAR-LOGOUT');\r\n                    })\r\n                    .error(function (err) {\r\n                        $rootScope.$broadcast('GAPI-SERVICE-BAR-LOGOUT', {\r\n                            \"error: \": err\r\n                        });\r\n                    });\r\n            },\r\n\r\n            getUser: function (cb) {\r\n                var localGapiUser = $window.localStorage.getItem('GAPI-USER');\r\n\r\n                if (localGapiUser) {\r\n                    localGapiUser = JSON.parse(localGapiUser);\r\n\r\n                    $http.get(core.getAccountsCoreUrl() + 'credentials/' + localGapiUser.id || localGapiUser._id)\r\n                        .success(function (userData) {\r\n                            if (userData) {\r\n                                delete userData.pwd;\r\n                                $window.localStorage.setItem('GAPI-APPS', JSON.stringify(userData.apps));\r\n                                delete userData.apps;\r\n                                $window.localStorage.setItem('GAPI-USER', JSON.stringify(userData));\r\n\r\n                                // Get image\r\n                                $http.get(core.getAccountsCoreUrl() + 'credentials/public?imagepath=' + userData.imageUrl.split('/')[3], { responseType: 'arraybuffer'})\r\n                                    .success(function (imageDownloadData) {\r\n\r\n                                        var blob      = new Blob([imageDownloadData], {type: 'image/jpeg'}),\r\n                                            objectUrl = URL.createObjectURL(blob);\r\n\r\n                                        userData.binaryImage = objectUrl;\r\n                                        $('#gsbProfileImage').css('src', 'url(' + objectUrl + ')');\r\n\r\n                                        return cb(null, userData);\r\n                                    })\r\n                                    .error(function (reason) {\r\n                                        console.log(reason);\r\n                                        return cb(null, userData);\r\n                                    });\r\n                            }\r\n\r\n                        })\r\n                        .error(function (err) {\r\n                            console.log('[ERROR - validateToken]: ', err);\r\n                            cb(err, null);\r\n                        });\r\n                }\r\n\r\n            },\r\n\r\n            // It will connects the websocket and wait for pushs on {GAPI-SERVICE-BAR-NOTIFICATION} $broadcast\r\n            // it also has reconnect capability\r\n            getNotifications: function () {\r\n                websocketFactory.connect();\r\n            },\r\n\r\n            getApplications: function () {\r\n                var localGapiApps = JSON.parse($window.localStorage.getItem('GAPI-APPS'));\r\n                return localGapiApps || [];\r\n            },\r\n\r\n            setAsRead: function (reminder_id) {\r\n                websocketFactory.setAsRead(reminder_id);\r\n            },\r\n\r\n            getMessages: function () {\r\n                return [];\r\n            },\r\n\r\n            getAccountsUrl: function () {\r\n                return core.getAccountsUrl();\r\n            },\r\n\r\n            redirect: function (url) {\r\n                $window.location.href = url;\r\n            },\r\n\r\n            getCallbackUrl: function (appid, cb) {\r\n                $http.post(core.getAccountsCoreUrl() + '_oauth', {\r\n                    \"appid\": appid\r\n                })\r\n                    .success(function (data) {\r\n                        if (data.callbackUrl) {\r\n                            cb(null, data.callbackUrl + '?token=' + factory.getToken());\r\n                        } else {\r\n                            cb('CallbackUrl not found');\r\n                        }\r\n                    })\r\n                    .error(function (err) {\r\n                        console.log('[ERROR - validateToken]: ', err);\r\n                        cb(err || 'Server Unavailable', null);\r\n                    });\r\n            }\r\n        };\r\n\r\n        return factory;\r\n\r\n    }\r\n\r\n    GapiServiceBarFactory.$inject = ['$http', '$q', '$window', '$rootScope', 'coreApiService', 'websocketFactory'];\r\n\r\n    angular.module('gapiServiceBar').factory('gapiServiceBarFactory', GapiServiceBarFactory);\r\n\r\n}());\r\n","/*global angular, console, FormData, window, WebSocket*/\r\n/*jslint todo: true */\r\n\r\n(function () {\r\n    \"use strict\";\r\n\r\n    var factory, ws, currentToken;\r\n\r\n    function GapiServiceBarWebsocketFactory($rootScope, $window, $timeout, core) {\r\n\r\n        factory = {\r\n\r\n            connect: function () {\r\n\r\n\r\n                if ($rootScope.websocket) {\r\n                    return;\r\n                }\r\n\r\n                $rootScope.isWebsocketLoading = true;\r\n                $rootScope.isWebsocketConnected = false;\r\n\r\n                currentToken = $window.localStorage.getItem('GAPI-TOKEN');\r\n                ws = new WebSocket(core.getAppCoreUrl().replace('http', 'ws').split(\"/api\")[0] + '?token=' + currentToken);\r\n\r\n                // When gets connected\r\n                ws.onopen = function (ev) {\r\n                    $timeout(function () {\r\n                        console.log('WebSocket connected type: [' + ev.type + ']');\r\n                        $window.localStorage.removeItem('GAPI-WEBSOCKET-RECONNECT');\r\n                        $rootScope.isWebsocketConnected = true;\r\n                        $rootScope.isWebsocketLoading = false;\r\n                    });\r\n                };\r\n\r\n                // When the connection gets closed\r\n                // Firstly it will try to reconnect after 30s\r\n                // On a second shot it will try to reconnect after 60s\r\n                ws.onclose = function () {\r\n\r\n                    var isSecondShot = !!$window.sessionStorage.getItem('GAPI-WEBSOCKET-RECONNECT');\r\n\r\n                    console.log('WebSocket disconnected, to reconnect click on the bell at the top bar and click on reconnect.');\r\n\r\n                    if (!isSecondShot) {\r\n                        $window.sessionStorage.setItem('GAPI-WEBSOCKET-RECONNECT', true);\r\n                    }\r\n\r\n                    $timeout(function () {\r\n                        $rootScope.isWebsocketConnected = false;\r\n                        $rootScope.isWebsocketLoading   = false;\r\n                        $rootScope.websocket            = null;\r\n                    });\r\n\r\n                    $timeout(function () {\r\n                        factory.connect();\r\n                    }, isSecondShot ? 60000 : 30000);\r\n                };\r\n\r\n                // Error handling\r\n                ws.onerror = function (err) {\r\n                    $rootScope.isWebsocketConnected = $rootScope.isWebsocketLoading = false;\r\n                    $rootScope.websocket            = null;\r\n                    console.log('WebSocket Error [' + JSON.stringify(err) + ']');\r\n                };\r\n\r\n                // When a message comes\r\n                ws.onmessage = function (message) {\r\n                    if (message.data) {\r\n                        $rootScope.$broadcast('GAPI-SERVICE-BAR-NOTIFICATION', JSON.parse(message.data));\r\n                    }\r\n                };\r\n\r\n                $rootScope.websocket = ws;\r\n\r\n            },\r\n\r\n            setAsRead: function (reminder_id) {\r\n                if (!$rootScope.websocket || !reminder_id) {\r\n                    return;\r\n                }\r\n\r\n                $rootScope.websocket.send(JSON.stringify(reminder_id));\r\n            }\r\n        };\r\n\r\n        return factory;\r\n\r\n    }\r\n\r\n    GapiServiceBarWebsocketFactory.$inject = ['$rootScope', '$window', '$timeout', 'coreApiService'];\r\n\r\n    angular.module('gapiServiceBar').factory('websocketFactory', GapiServiceBarWebsocketFactory);\r\n\r\n}());","/*global angular, console*/\r\n(function () {\r\n    \"use strict\";\r\n\r\n    function GapiServiceBarRequestInterceptor($q, $window) {\r\n\r\n        return {\r\n\r\n            // On request success\r\n            request: function (config) {\r\n\r\n                // Add Token info to every request\r\n                config.headers.Authorization = $window.localStorage.getItem('GAPI-TOKEN');\r\n\r\n                return config;\r\n            },\r\n\r\n            // On request error\r\n            requestError: function (reason) {\r\n                // Return the promise error reason.\r\n                return $q.reject(reason);\r\n            },\r\n\r\n            // On response success\r\n            response: function (response) {\r\n                // Return the response or promise.\r\n                return response || $q.when(response);\r\n            },\r\n\r\n            // On response error\r\n            responseError: function (reason) {\r\n                // Return the promise error reason.\r\n                return $q.reject(reason);\r\n            }\r\n\r\n        };\r\n    }\r\n\r\n    GapiServiceBarRequestInterceptor.$inject = [ '$q', '$window' ];\r\n\r\n    angular.module('gapiServiceBar').factory('gapiServiceBarRequestInterceptor', GapiServiceBarRequestInterceptor);\r\n\r\n}());\r\n"],"sourceRoot":"/source/"}