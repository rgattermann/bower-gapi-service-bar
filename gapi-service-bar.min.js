/*global angular,console*/
(function () {
    'use strict';

    // Module dependencies injection
    angular.module('gapiServiceBar', [ 'aruba.js', 'ngMaterial' ]);

}());

/*global angular */
(function () {
    'use strict';

    angular.module('gapiServiceBar').config([ '$httpProvider', function ($httpProvider) {

        // Interceptor to add token on every Header Request
        $httpProvider.interceptors.push('gapiServiceBarRequestInterceptor');

    }]);

}());

/*global angular, console, $ */
(function () {
    "use strict";

    function GapiServiceBarController($scope, $rootScope, gapiServiceBarFactory) {

        $scope.isLoading = false;

        /* $scope Functions */
        $scope.userPanel = function () {
            console.log('UserPanel');
        };

        $scope.userSettings = function () {
            console.log('UserSettings');
        };

        $scope.userHelp = function () {
            console.log('userHelp');
        };

        $scope.openTicket = function () {
            console.log('openTicket');
        };

        $scope.logout = function () {
            gapiServiceBarFactory.logout();
        };

        $scope.redirect = function (url) {
            gapiServiceBarFactory.redirect(url);
        };

        $scope.getCallbackUrl = function (app) {
            $scope.isLoading = true;

            gapiServiceBarFactory.getCallbackUrl(app._id, function (err, callbackUrl) {
                if (err) {
                    console.log('[ERROR]: ', err);
                }

                $scope.redirect(callbackUrl);
                $scope.isLoading = false;
            });
        };

        $rootScope.$on('GAPI-LOGOUT', function () {
            console.log('GAPI-SERVICE-BAR (-.-) LOGOUT');
        });

        (function () {

            $scope.isLoading = true;

            // If the user is not logged will be redirected to accounts
            gapiServiceBarFactory.validateUser().then(function () {

                // Service Bar User (will get from aruba.js)
                $scope.user = gapiServiceBarFactory.getUser();

                // Service Bar Applications
                $scope.applications = gapiServiceBarFactory.getApplications();

                // Service Bar Notifications
                $scope.notifications = gapiServiceBarFactory.getNotifications();

                // Service Bar Messages
                $scope.messages = gapiServiceBarFactory.getMessages();

                // Loading Status
                $scope.isLoading = false;
            });

        }());

    }

    GapiServiceBarController.$inject = [ '$scope', '$rootScope', 'gapiServiceBarFactory' ];

    angular.module('gapiServiceBar').controller('GapiServiceBarController', GapiServiceBarController);

}());

/*global angular, console, document, $*/

function GapiServiceBarDirective() {
    "use strict";

    return {
        restrict: 'E',
        templateUrl: '../vendor/gapi-service-bar/gapi-service-bar.html',
        controller: 'GapiServiceBarController',

        link: function (scope) {

            scope.openMenu = function ($mdOpenMenu, ev) {
                $mdOpenMenu(ev);
            };

        }
    };
}

angular.module('gapiServiceBar').directive('gapiServiceBar', [ '$mdDialog', GapiServiceBarDirective ]);
/*global angular, console, FormData, window*/
/*jslint todo: true */

(function () {
    "use strict";

    function GapiServiceBarFactory($http, $q, $window, $rootScope, core) {

        var factory = {

            validateUser: function () {

                // Creating Promise
                var tokenDefer = $q.defer(),
                    token;

                // Checking if it comes from accounts with querystring token
                if (window.location.search.split('=')[1]) {

                    // Will set token to SessionStorage
                    this.setToken(window.location.search.split('=')[1]);

                    window.location.href = '/';

                } else {

                    // If there's no token will redirect to accounts to get a new one
                    token = this.getToken();

                    if (!token) {
                        $window.location.href = this.getAccountsUrl() + '?callbackurl=' + window.location.href;
                        tokenDefer.reject();
                    }
                }

                // Validating Token against Core Server
                this.validateToken(function (err, userdata) {

                    if (err) {
                        tokenDefer.reject(err || 'No Data');
                    } else {

                        // Setting User Data
                        var userObj = {
                            id: userdata.id,
                            username: userdata.username,
                            imageUrl: userdata.imageUrl
                        };

                        // Storing it on Session Storage
                        $window.sessionStorage.setItem('GAPI-USER', JSON.stringify(userObj));

                        // Setting User Applications
                        $window.sessionStorage.setItem('GAPI-APPS', JSON.stringify(userdata.apps));

                        // Resolving Promise
                        tokenDefer.resolve();
                    }
                });

                return tokenDefer.promise;
            },

            validateToken: function (cb) {
                $http.get(core.getAccountsCoreUrl() + 'me')
                    .success(function (data) {
                        cb(null, data);
                    })
                    .error(function (err) {
                        console.log('[ERROR - validateToken]: ', err);
                        cb(err, null);
                    });
            },

            setToken: function (token) {
                if (token && token !== 'undefined' && token !== 'null') {
                    $window.sessionStorage.setItem('GAPI-TOKEN', token);
                }
            },

            getToken: function () {
                return $window.sessionStorage.getItem('GAPI-TOKEN');
            },

            logout: function () {

                $http.get(core.getAccountsCoreUrl() + 'logout/')
                    .success(function (data) {

                        // Remove User
                        $window.sessionStorage.removeItem('GAPI-USER');

                        // Remove Token
                        $window.sessionStorage.removeItem('GAPI-TOKEN');

                        // Remove Apps
                        $window.sessionStorage.removeItem('GAPI-APPS');

                        // Promise Resolve
                        $rootScope.$broadcast('GAPI-LOGOUT', data);

                    })
                    .error(function (err) {
                        // Promise Reject
                        $rootScope.$broadcast('GAPI-LOGOUT', err);
                    });

            },

            getUser: function () {
                var localGapiUser = $window.sessionStorage.getItem('GAPI-USER');
                return JSON.parse(localGapiUser);
            },

            getApplications: function () {
                var localGapiApps = JSON.parse($window.sessionStorage.getItem('GAPI-APPS'));
                return localGapiApps || [];
            },

            getNotifications: function () {
                // TODO: Implement Websockets
                return [{"application": "Integra", "description": "Notificação de Teste", "timespan": "Agora pouco"}];
            },

            getMessages: function () {
                return [];
            },

            getAccountsUrl: function () {
                return core.getAccountsUrl();
            },

            redirect: function (url) {
                $window.location.href = url;
            },

            getCallbackUrl: function (appid, cb) {
                $http.post(core.getAccountsCoreUrl() + '_oauth', {"appid": appid})
                    .success(function (data) {
                        if (data.callbackUrl) {
                            cb(null, data.callbackUrl + '?token=' + factory.getToken());
                        } else {
                            cb('CallbackUrl not found');
                        }
                    })
                    .error(function (err) {
                        console.log('[ERROR - validateToken]: ', err);
                        cb(err || 'Server Unavailable', null);
                    });
            }
        };

        return factory;

    }

    GapiServiceBarFactory.$inject = [ '$http', '$q', '$window', '$rootScope', 'coreApiService' ];

    angular.module('gapiServiceBar').factory('gapiServiceBarFactory', GapiServiceBarFactory);

}());

/*global angular, console*/
(function () {
    "use strict";

    function GapiServiceBarRequestInterceptor($q, $window) {

        return {

            // On request success
            request: function (config) {

                // Add Token info to every request
                config.headers.Authorization = $window.sessionStorage.getItem('GAPI-TOKEN');

                return config;
            },

            // On request error
            requestError: function (reason) {
                // Return the promise error reason.
                return $q.reject(reason);
            },

            // On response success
            response: function (response) {
                // Return the response or promise.
                return response || $q.when(response);
            },

            // On response error
            responseError: function (reason) {
                // Return the promise error reason.
                return $q.reject(reason);
            }

        };
    }

    GapiServiceBarRequestInterceptor.$inject = [ '$q', '$window' ];

    angular.module('gapiServiceBar').factory('gapiServiceBarRequestInterceptor', GapiServiceBarRequestInterceptor);

}());

//# sourceMappingURL=gapi-service-bar.min.js.map